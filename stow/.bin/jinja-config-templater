#!/usr/bin/env python3

import os
import sys
import json
import jinja2
import argparse
import fontawesome as fa
import glob
import libvirt
import gi

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
from dataclasses import dataclass
from lxml import etree

if not sys.warnoptions:
    import warnings
    warnings.simplefilter("ignore")

@dataclass
class Machine:
    name: str = ""
    nick: str = ""
    default: bool = False

# https://stackoverflow.com/questions/4984647/accessing-dict-keys-like-an-attribute
class Map(dict):
    """
    Example:
    m = Map({'first_name': 'Eduardo'}, last_name='Pool', age=24, sports=['Soccer'])
    """
    def __init__(self, *args, **kwargs):
        super(Map, self).__init__(*args, **kwargs)
        for arg in args:
            if isinstance(arg, dict):
                for k, v in arg.items():
                    self[k] = v
                    self[k.replace('-', '_')] = v

        if kwargs:
            for k, v in kwargs.iteritems():
                self[k] = v

    def __getattr__(self, attr):
        return self.get(attr)

    def __setattr__(self, key, value):
        self.__setitem__(key, value)

    def __setitem__(self, key, value):
        super(Map, self).__setitem__(key, value)
        self.__dict__.update({key: value})

    def __delattr__(self, item):
        self.__delitem__(item)

    def __delitem__(self, key):
        super(Map, self).__delitem__(key)
        del self.__dict__[key]


def json_load(path: str) -> dict:
    try:
        with open(os.path.expanduser(path), "r") as f:
            return json.loads(f.read())
    except:
        return {}

def hex_to_rgba(v):
    color_rgba = [int(x*255) for x in [v.red, v.green, v.blue]]
    color_hex = '#{:02x}{:02x}{:02x}'.format(*color_rgba)
    return color_hex

def gtk_theme_info():
    window = Gtk.Window()
    vbox = Gtk.VBox()
    menubar = Gtk.MenuBar()
    menuitem = Gtk.MenuItem()
    menubar.add(menuitem)
    vbox.add(menubar)
    window.add(vbox)
    window.show_all()

    f_, b_, c_ = (
        menubar.get_style_context().get_color(Gtk.StateType.NORMAL),
        menubar.get_style_context().get_background_color(Gtk.StateType.NORMAL),
        menuitem.get_style_context().get_background_color(Gtk.StateType.NORMAL),
    )

    # Print.get_style_context() context colors of widget class Gtk.Button
    return {
        "foreground": hex_to_rgba(f_),
        "background": hex_to_rgba(b_),
        "color": hex_to_rgba(c_),
    }
    window.destroy()

def libvirt_machines():
    conn = libvirt.open("qemu:///system")
    machines = []

    if conn == None:
        print("[!] Failed to open connection to qemu:///system", file=sys.stderr)
        return machines

    domains = conn.listAllDomains(0)
    if len(domains) != 0:
        for domain in domains:
            try:
                name = domain.name()
                full_xml = etree.fromstring(domain.XMLDesc())
                desc_xml = full_xml.find("./description")
                desc = desc_xml.text if desc_xml is not None else "{}"
                info = json.loads(desc)
                m = Machine(name)
                m.nick = info.get("nick", name)
                m.default = info.get("default", False)
                machines.append(m)
            except Exception as e:
                pass

    return machines

def fileglob(pathname):
    """ return list of matched files for glob """
    return glob.glob(os.path.expanduser(pathname))


def render(template_path, data, extensions, strict=False):
    from jinja2 import Environment, FileSystemLoader, StrictUndefined

    cwd = os.path.dirname(os.path.abspath(template_path))
    env = Environment(
        loader=FileSystemLoader(["/", cwd]),
        extensions=extensions,
        keep_trailing_newline=False,
    )
    env.globals["fileglob"] = fileglob

    if strict:
        env.undefined = StrictUndefined

    environ = os.environ
    environ['HOME'] = os.path.expanduser('~')

    # Add environ global
    env.globals["json"] = json_load
    env.globals["env"] = environ
    env.globals["libvirt"] = libvirt_machines()
    env.globals["gtk"] = gtk_theme_info()
    env.globals["hostname"] = os.uname().nodename
    env.globals["environ"] = lambda key: force_text(os.environ.get(key))
    env.globals["get_context"] = lambda: data
    env.globals["fa"] = Map(fa.icons)
    env.globals["fileglob"] = fileglob
    env.filters["fileglob"] = fileglob

    return env.get_template(os.path.abspath(template_path)).render(data)


try:
    old = open(sys.argv[1], "r").read()
except:
    old = ""

new = render(sys.argv[1] + ".tpl", {}, [])

if old != new:
    new_path = sys.argv[1] + ".new"
    with open(new_path, "w") as f:
        f.write(new)
        os.rename(new_path, sys.argv[1])
        sys.exit(0)

sys.exit(1)
