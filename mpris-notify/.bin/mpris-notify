#!/usr/bin/env python3

import sys

from gi.repository import GLib, Gio
import gi
import urllib.request

try:
    gi.require_version('Playerctl', '2.0')
    from gi.repository import Playerctl
except:
    print("Unable to import Playerctl")
    print("try installing gir1.2-playerctl-2.0")
    sys.exit(1)

manager = Playerctl.PlayerManager()

gi.require_version('Notify', '0.7')
from gi.repository import Notify

Notify.init("Media Player")
notification = Notify.Notification.new("");

from urllib.parse import urlparse, unquote
from pathlib import Path
from gi.repository import GdkPixbuf
import os.path

def notify(player):
    metadata = player.props.metadata
    keys = metadata.keys()
    if 'xesam:artist' in keys and 'xesam:title' in keys:

        if 'xesam:album' in keys:
            notification.update(metadata['xesam:title'], "{} / {}".format(
                metadata['xesam:artist'][0],
                metadata['xesam:album']))
        else:
            notification.update(metadata['xesam:title'], metadata['xesam:artist'][0], )

        path = Path(unquote(urlparse(metadata['xesam:url']).path)).parent / "cover.jpg";
        if os.path.exists(path):
            image = GdkPixbuf.Pixbuf.new_from_file(str(path));
            notification.set_image_from_pixbuf(image)
        elif 'mpris:artUrl' in keys:
            url = metadata['mpris:artUrl']
            try:
                response = urllib.request.urlopen(url, timeout=2)
                input_stream = Gio.MemoryInputStream.new_from_data(response.read(), None)
                pixbuf = GdkPixbuf.Pixbuf.new_from_stream(input_stream, None)
                notification.set_image_from_pixbuf(pixbuf)
            except:
                pass

        # notification.add_action('previous', 'Previous', lambda x, y, z: player.previous(), None)
        # notification.add_action('next', 'Next', lambda x, y, z: player.next(), None)

        notification.show();

def on_play(player, status, manager):
    notify(player);

def on_metadata(player, metadata, manager):
    notify(player);

def init_player(name):
    player = Playerctl.Player.new_from_name(name)
    player.connect('playback-status::playing', on_play, manager)
    player.connect('metadata', on_metadata, manager)
    manager.manage_player(player)
    # notify(player)

def on_name_appeared(manager, name):
    init_player(name)

manager.connect('name-appeared', on_name_appeared)

for name in manager.props.player_names:
    init_player(name)

main = GLib.MainLoop()
main.run()

Notify.uninit()
