#!/usr/bin/env python3
import libvirt
import ast
import sys
import gi
import os

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
import subprocess
import configparser
import psutil
import signal
from rofi import Rofi

qemu_conn = "qemu:///system"
i3block_signal = signal.SIGUSR1

def config_get(config, *args, **kwargs):
    if not config:
        return args[1]
    try:
        return ast.literal_eval(config.get(*args, **kwargs))
    except:
        return config.get(*args, **kwargs)

def get_config_dir(app_name):
    if 'XDG_CONFIG_HOME' in os.environ:
        confighome = os.environ['XDG_CONFIG_HOME']

    elif 'APPDATA' in os.environ:  # On Windows
        confighome = os.environ['APPDATA']

    else:
        try:
            from xdg import BaseDirectory
            confighome = BaseDirectory.xdg_config_home

        except ImportError:  # Most likely a Linux/Unix system anyway
            confighome = os.path.join(os.path.expanduser('~'), '.config')

    configdir = os.path.join(confighome, app_name)

    return configdir

def quit_with_error(title, description):
    dialog = Gtk.MessageDialog(
        None,
        Gtk.DialogFlags.MODAL,
        Gtk.MessageType.ERROR,
        Gtk.ButtonsType.CANCEL,
        title,
    )
    if description is not None:
        dialog.format_secondary_text(description)
    dialog.run()
    sys.exit(1)


def invoke_dmenu(completion_list, prompt=None):
    # build stdin
    dmenu_input = "\n".join(completion_list) + "\n"

    # build command
    dmenu_cmd = ["rofi", "-dmenu"]
    if prompt is not None:
        dmenu_cmd.append("-p")
        dmenu_cmd.append(prompt)

    dmenu_res = subprocess.run(
        dmenu_cmd, input=dmenu_input, stdout=subprocess.PIPE, universal_newlines=True
    )
    if dmenu_res.returncode != 0:
        # user quit dmenu with escape keypress
        # gracefully exit our script - user requested termination
        sys.exit(0)

    return dmenu_res.stdout


def lookup_vm(virt_conn, vm_name, prompt_completion=False):
    try:
        vm = virt_conn.lookupByName(vm_name)
    except:
        # prompt for VM title with dmenu
        vm_name_stripped = vm_name.lower().strip()

        # avoid duplicating the error message
        # construct a candidate list of VMs if prompt_completion is true, otherwise obtain no candidates (which will lead to the error condition, as intended)
        candidate_list = (
            list(
                filter(
                    lambda vm: vm.lower().strip().startswith(vm_name_stripped),
                    virt_conn.listDefinedDomains(),
                )
            )
            if prompt_completion
            else []
        )
        if len(candidate_list) == 0:
            quit_with_error(
                "VM Not Found", 'The given VM, "%s", does not exist.' % vm_name
            )

        return lookup_vm(
            virt_conn, invoke_dmenu(candidate_list, prompt="vm name?"), False
        )

    return vm


with libvirt.open(qemu_conn) as conn:

    config = configparser.ConfigParser()
    config_path = os.path.join(get_config_dir('rofi-libvirt'), 'config')
    local_path = os.path.join(get_config_dir('rofi-libvirt'), 'local')
    if os.access(config_path, os.R_OK):
        print("Reading: {}".format(config_path))
        config.read(config_path)
    if os.access(config_path, os.R_OK):
        print("Reading: {}".format(local_path))
        config.read(local_path)

    domainNames = conn.listDefinedDomains()
    if conn == None:
        print("Failed to get a list of domain names", file=sys.stderr)

    domainIDs = conn.listDomainsID()
    if domainIDs == None:
        print("Failed to get a list of domain IDs", file=sys.stderr)

    if len(domainIDs) != 0:
        for domainID in domainIDs:
            domain = conn.lookupByID(domainID)
            domainNames.append(domain.name())

    domainNames = sorted(domainNames)

    r = Rofi()
    index, key = r.select("Which virtual machine ?", domainNames)
    if index == -1:
        sys.exit(1)
    vm = lookup_vm(conn, domainNames[index])

    r = Rofi()
    action_list = ["start", "shutdown", "managedsave", "view"]
    index, key = r.select("[{}]".format(vm.name()), action_list)
    if index == -1:
        sys.exit(1)
    action = action_list[index]

    try:
        if action == "shutdown":
            vm.shutdown()
        elif action == "start":
            vm.create()
        elif action == "managedsave":
            vm.managedSave()
        elif action == "view":
            spice_opts = []
            vm_shared_dir = None
            vm_config = None
            if vm.name() in config:
                vm_config = config[vm.name()]
            else:
                vm_config = config["DEFAULT"]

            vm_shared_dir = config_get(vm_config, 'shared_dir', vm_shared_dir)
            if vm_shared_dir:
                if isinstance(vm_shared_dir, list):
                    index, key = r.select('Which shared directory', vm_shared_dir)
                    if index == -1:
                        sys.exit(1)
                    vm_shared_dir = vm_shared_dir[index]
                if len(vm_shared_dir) > 0:
                    if vm_shared_dir == 'ask':
                        vm_shared_dir = r.text_entry('Which path to share?')
                    spice_opts += ["--spice-shared-dir", os.path.expanduser(vm_shared_dir)]

            args = config_get(vm_config, 'viewer_args', [])
            print(args, spice_opts)

            subprocess.Popen(
                ["virt-viewer", "-c", qemu_conn, "-a", vm.name()] + args + spice_opts,
                close_fds=True,
            )
    except e as Exception:
        quit_with_error('Error Executing Action', 'The following error(s) occurred while attempting to execute action "%s":\n\n%s' % (action, sys.exc_info()[0]))

# after everything, signal i3blocks in case status changed
if i3block_signal is not None:
    for proc in psutil.process_iter():
        if proc.name() == "i3blocks" or proc.name() == "py3status":
            # print('Sending signal %d to process %d' % (i3block_signal, proc.pid))
            proc.send_signal(i3block_signal)
