#!/bin/env python3

""" this code will run when change focus in workspace """
import re
import sys
import i3ipc

def get_defaults(conn):
    regex = re.compile(r"^# workspace_default_layout (\d+) (\w+)$")
    version = conn.get_version();
    defaults = {}
    with open(version.loaded_config_file_name, 'r') as config:
        for line in config.readlines():
            m = regex.match(line)
            if m:
                print(f"[ ] {m.group(0)}")
                try:
                    ws = int(m.group(1))
                    layout = m.group(2)
                    defaults[ws] = layout
                except:
                    pass
    return defaults


# pylint: disable=invalid-name
i3 = i3ipc.Connection()

layouts = get_defaults(i3)

MANAGED_MARK = "MANAGED_WORKSPACE"

def non_floating_leaves(workspace):
    return [w for w in workspace.leaves() if not w.floating in ["auto_on", "user_on"]]

def reparent(workspace):
    windows = non_floating_leaves(workspace)
    for w in windows:
        i3.command(f'[con_id={w.id}] floating enable')
    for w in windows:
        i3.command(f'[con_id={w.id}] floating disable')
    i3.command(f'[con_id={workspace.id}] layout tabbed')

def set_web_layout_to_tab(workspace):
        """ because i3 do not support different layouts (stack, tabbed, split) on different
        workspaces dynamically. https://github.com/i3/i3/issues/531 """
        if workspace and workspace.num in layouts and len(non_floating_leaves(workspace)) > 1: # $ws_web. see ~/.config/i3/config
            if any([w.parent.id != workspace.nodes[0].id for w in non_floating_leaves(workspace)]):
                print(f'[*] reparenting windows in workspace: {workspace.num}')
                reparent(workspace)




# pylint: disable=unused-argument
def on_window_focus(self, event):
    focused = i3.get_tree().find_focused()
    set_web_layout_to_tab(focused.workspace())
               
# pylint: disable=unused-argument
def on_workspace_focus(self, event):
        """ change web workspace to tabbed layout on focus """
        set_web_layout_to_tab(event.current)

try:
        i3.on('workspace::focus', on_workspace_focus)
        i3.on('window::focus', on_window_focus)
        i3.main()
except KeyboardInterrupt:
        pass
